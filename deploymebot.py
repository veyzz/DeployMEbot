# -*- coding: utf-8 -*-
import config
import telebot
from telebot import apihelper, types
import cherrypy
import os
import zipfile
import json
import re
from backend import preparefiles
from dmbhelper import SQLighter, add_new_bot


MODE = config.mode
TOKEN = config.token
PROXYLIST = config.proxy
DB = config.db
BOTS_COUNT = config.bots_count


bot = telebot.TeleBot(TOKEN)


class WebhookServer:

    @cherrypy.expose
    def index(self):
        length = int(cherrypy.request.headers['content-length'])
        json_string = cherrypy.request.body.read(length).decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''


@bot.message_handler(commands=['start', 'help'])
def _(message):
    response = '''–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –í–∞—à–µ–≥–æ –±–æ—Ç–∞
–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º 24/7.'''
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å')
    bot.send_message(message.chat.id, response, reply_markup=keyboard)
    db = SQLighter(DB)
    if not db.select(message.from_user.id):
        db.insert(message.from_user.id)


@bot.message_handler(content_types=['document'])
def _(message):
    try:
        file_name = re.sub(r'[^A-z0-9\.]', '', message.document.file_name)
        bot_name, _ = os.path.splitext(file_name)
        downloaded_file = bot.download_file(bot.get_file(message.document.file_id).file_path)
        if message.document.mime_type != "application/zip":
            bot.reply_to(message, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ zip!")
            return
        path = './download/{}/'.format(message.from_user.id)
        if not os.path.exists(path):
            os.makedirs(path)
        path += file_name
        path = os.path.abspath(path)
        with open(path, 'wb') as file:
            file.write(downloaded_file)
        with zipfile.ZipFile(path, 'r') as z:
            files = z.namelist()
        req = False
        st = False
        for element in files:
            if 'requirements.txt' in element:
                req = True
            if 'tostart.txt' in element:
                st = True
        if not req:
            bot.reply_to(message, "–í—ã –∑–∞–±—ã–ª–∏ —Ñ–∞–π–ª requirements.txt")
        if not st:
            bot.reply_to(message, "–í—ã –∑–∞–±—ã–ª–∏ —Ñ–∞–π–ª tostart.txt")
        if not (req and st):
            os.remove(path)
            return
        db = SQLighter(DB)
        user = db.select(message.from_user.id)
        bots, changes = add_new_bot(user, bot_name)
        if changes == 1:
            db.update(message.from_user.id, 'bots', bots)
        if changes in range(2):
            preparefiles.deploy(message.from_user.id, file_name, os.getcwd())
            os.remove(path)
            bot.reply_to(message, "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç!")
        elif changes == 2:
            response = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤: {}. –ë–æ–ª—å—à–µ –±–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è!".format(BOTS_COUNT)
            bot.reply_to(message, response)
    except Exception as e:
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        if not db.select(message.from_user.id):
            db.insert(message.from_user.id)
        print("error: ", e)


@bot.message_handler(content_types=["text"])
def _(message):
    if message.text == "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞":
        response = '''–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>*.zip</i> –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:
- <code>requerements.txt</code>, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
- <code>tostart.txt</code>, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–æ, –∫–∞–∫–æ–π —Ñ–∞–π–ª –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
<b>–í–∞–∂–Ω–æ! –£ –Ω–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python 3.5.2,
–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –í–∞—à–µ–≥–æ –∫–æ–¥–∞!</b>'''
        keyboard = types.ReplyKeyboardMarkup(True, True)
        keyboard.row("üîê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
        keyboard.row("üí¨ –û –ø—Ä–æ–µ–∫—Ç–µ")
        bot.send_message(message.chat.id, response,
                         reply_markup=keyboard, parse_mode='html')
    elif message.text == "üîê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
        db = SQLighter(DB)
        user = db.select(message.from_user.id)
        bots = json.loads(user[2])
        response = '–í–∞—à–∏ –±–æ—Ç—ã:'
        for item in bots.keys():
            status = '–∑–∞–ø—É—â–µ–Ω'
            if not bots[item]['status']:
                status = '–Ω–µ –∑–∞–ø—É—â–µ–Ω'
            response += """
---
–°—Ç–∞—Ç—É—Å {}: {}
–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {}""".format(item, status, bots[item]['expire_time'])
        keyboard = types.ReplyKeyboardMarkup(True, True)
        keyboard.row("üöÄ –ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "üß© –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        keyboard.row("üí¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
        bot.send_message(message.chat.id, response, reply_markup=keyboard)
    else:
        response = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é:'
        keyboard = types.ReplyKeyboardMarkup(True, True)
        keyboard.row("üîê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
        keyboard.row("üí¨ –û –ø—Ä–æ–µ–∫—Ç–µ")
        bot.send_message(message.chat.id, response, reply_markup=keyboard)


if __name__ == '__main__':
    if MODE == 1:
        cherrypy.config.update({
            'server.socket_host': '127.0.0.1',
            'server.socket_port': 7777,
            'engine.autoreload.on': True
        })
        cherrypy.quickstart(WebhookServer(), '/', {'/': {}})
    elif MODE == 0:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫—Å–∏ (–≤–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏)
        apihelper.proxy = PROXYLIST
        bot.polling(none_stop=True)
